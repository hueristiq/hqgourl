package main

import (
	"encoding/csv"
	"fmt"
	"io"
	"net/http"
	"os"
	"strings"
	"text/template"

	"github.com/hueristiq/hqgolog"
	"github.com/spf13/pflag"
)

var (
	output string

	schemesTmpl = template.Must(template.New("schemes").Parse(`// This file is autogenerated by https://github.com/hueristiq/hqgourl/blob/main/generate/schemes/main.go. Please do not edit manually.

package schemes

// Schemes is a sorted list of all IANA assigned schemes.
// This list is fetched from:
//   - https://www.iana.org/assignments/uri-schemes/uri-schemes-1.csv
var Schemes = []string{
{{range $scheme := .Schemes}}` + "\t`" + `{{$scheme}}` + "`" + `,
{{end}}}
`))
)

func init() {
	pflag.StringVarP(&output, "output", "o", "", "")

	pflag.CommandLine.SortFlags = false
	pflag.Usage = func() {
		h := "USAGE:\n"
		h += "  schemes [OPTIONS]\n"

		h += "\nOPTIONS:\n"
		h += " -o, --output string                 output package file path\n"

		fmt.Fprintln(os.Stderr, h)
	}

	pflag.Parse()
}

func main() {
	hqgolog.Info().Msgf("Generating %s...", output)

	schemes := getSchemesList()

	if err := writeSchemes(schemes, output); err != nil {
		hqgolog.Fatal().Msg(err.Error())
	}
}

func getSchemesList() (schemes []string) {
	schemesSourcesURL := "https://www.iana.org/assignments/uri-schemes/uri-schemes-1.csv"

	resp, err := http.Get(schemesSourcesURL)
	if err != nil {
		hqgolog.Fatal().Msg(err.Error())
	}

	defer resp.Body.Close()

	r := csv.NewReader(resp.Body)

	if _, err := r.Read(); err != nil { // ignore headers
		hqgolog.Fatal().Msg(err.Error())
	}

	schemes = make([]string, 0)

	for {
		record, err := r.Read()
		if err == io.EOF {
			break
		}

		if err != nil {
			hqgolog.Fatal().Msg(err.Error())
		}

		if strings.Contains(record[0], "OBSOLETE") {
			continue // skip obsolete schemes; note the scheme column is abused
		}

		schemes = append(schemes, record[0])
	}

	return
}

func writeSchemes(schemes []string, output string) (err error) {
	f, err := os.Create(output)
	if err != nil {
		return
	}

	defer f.Close()

	return schemesTmpl.Execute(f, struct {
		Schemes []string
	}{
		Schemes: schemes,
	})
}
